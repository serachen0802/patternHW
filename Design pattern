課堂筆記
建立
**Singleton
sever端類別負責建立物件 不由client建
同一時間只有一物件實體
像是銀行給號機只能有一個
照類別給號 同一時間只會給一個號
一本書 沒辦法同時借給兩個人
book知道是否被借過
#舉例:一個位置一次只能坐一個人
判斷位置是否還有

**factory
A工廠B工廠都生產同種東西
工廠負責製造物品 藉由client端傳來的條件
讓次類別決定實體化的類別
#舉例:A服飾店跟B服飾店都是買褲子的
去兩間店都可以直接買到褲子
可以依個人喜好再做進一步地挑選

**factoru method
將具體創建的工作交給子類去做
成為抽象角色
僅負責給出具體工廠類必須實現的接口
#舉例:飲料店裡面有很多種飲料，每個客人的喜好都不同
但是都是飲料,去的時候只要跟店員說要一杯飲料
怎麼樣的口味,就是個人的喜好了


*Prototype
abstract 抽象類別 後代為 concrete
clone object 根據物件,造一個跟類別一樣的物件出來
有人跟酒保要一杯酒
旁邊的人要再來一杯一樣的
生產成本太高 用clone產生
#舉例:去飲料店點飲料的時候，不知道點什麼
就點了一杯跟上個人一樣的

結構
**adapter
充電器做出來了不能改
手機充電的地方也不能改
所以就製造轉接頭
兩個東西不合 藉由 adapter調整後 結合
格式不同 做法相同
#舉例:電腦的插頭是三頭插座的兩個洞的，這時候就需要轉接頭才能使用

**Bridge
使兩者可以獨立的變化
傳function到需求的地方
須符合介面需求
規格一樣 介面轉換 作法不同
把抽象和現實分開
#舉例:常用於API或平台實現

**decorator(wraper)
包裝
動態給一個對象增加功能
飯+滷蛋+滷肉 不停往上包裝加東西
#舉例:一張照片幫它加上相框，再用盒子包裝起來，再用緞帶裝飾
往外包裝！

**facade
既有的函示包裝成方便使用的樣子
一但固定下來就如同合約 供client端使用
與adapter動機不同
#舉例:洗衣機的功能很多又複雜，但是可以調成自動
這樣就不會看不懂上面複雜的功能，可以直接啟動

行為
**observer
八卦雜誌有主題 粉絲去訂閱
有新的就會發送
一對多的依賴關係
#舉例:訂閱youtube喜歡的youtuber
當她有新的影片上傳時就會通知訂閱的人

**command
透過command下指令
委派給不同對象命令
#舉例:班長在班級中幫忙同學與老師之間傳達指令
老師很忙所以麻煩班長幫他跟同學傳話

**interpreter
訪問者模式的目的是封裝一些施加於某種數據結構元素之上的操作。
一旦這些操作需要修改的話，接受這個操作的數據結構 
可以保持不變。
X


心得：今天學了很多物件導向更深一層的東西，
雖然懂了他們涵義以及適合用在什麼地方，更看了很多的程式範例
但是如果真的要運用起來，還是有相當的難度
要再花更多的時間去熟悉或是上手!
透過真實生活例子，可以幫助我們了解得更快
原來我們的生活已經都在運用著這些例子只是我們不知道而已!